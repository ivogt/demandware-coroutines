
/**
*
* @output Coroutine : Object 		Delegate to excecute
*
*/

importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{	function castParamsToObject (httpParameters){
		let actionPrefix = "directive";
		let casted = { action : []},params=httpParameters;
		for(param in params){
			let [value] = params[param];//destructure to [0]
			casted[param] = value;
			let [directive,action] = param.split('_');
			if(directive == "directive" && action == "action"){
				casted['action'] = param.split('_').slice(2);
			}
		}
		return casted;
	}
	var URLUtils : dw.web.URLUtils = require("dw/web/URLUtils");
	var CO = require('CO').CO;
	
	
	var GetCustomer = require('~/cartridge/scripts/directives/customer-get');
	var RenderContinue = require('~/cartridge/scripts/directives/render-continue');
	var Noop = require('~/cartridge/scripts/directives/noop');
	var TODOs : Array = [{ id: 1, text : "This is awesome todo task 1!" , resolved: false}
					, { id: 1, text : "This is awesome todo task 2!", resolved: false} ];
					
					
					
	args.Coroutine = new CO(function Todo(){
		
		var customer = yield new GetCustomer();
		var Render =  new RenderContinue({template:"tests/RunnerTest/todo-test" , todos: TODOs});
		let output = yield Render.handle(function interaction$handler( params ){
						this.error = undefined;
						var params = castParamsToObject(params);
						trace("params:" +JSON.stringify(params));
						if(!!params.action && !!params.action.length){
							
							let [action,index] =  params.action;
							switch(action){
								case "add":
									trace("Action : add");
									if(!params.name || params.name.length < 3){
										this.error = "Enter task with minimum 3 symbols! You lazy!";
										yield this.retry();
										break;
									}
									this.todos.push({
										id: TODOs.length,
										text: params.name,
										resolved :false,
									});
									break;
								case "remove":
										trace("Action : remove");
										this.todos.splice(index, 1);
									break;
								case "resolve":
									trace("Action : resolve");
										let target = this.todos[index];
										if(!!target){target.resolved = true;}
									break;
								case "removeResolved":
									trace("Action : removeResolved");
										this.todos = this.todos.filter(function (current){
											return !current.resolved;
										});
									break;
								default:
								break;
							}
						}
						
						yield this.retry();
						
					});
		trace(URLUtils.httpsContinue());
		yield;
	
	}).run("TestDelegate");
   return PIPELET_NEXT;
}
