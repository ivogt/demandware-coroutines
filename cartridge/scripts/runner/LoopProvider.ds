/**
*
* @input Coroutine : Object 	This is the delegate instance
* @input lastDirective : Object 	This is the last called directive , called in the previous loop
* @input ScriptLog : Object 	ScriptLog
* @output Directive : Object 		Directive to excecute
* @output DirectivePipeline : String 		Directive to excecute
*
*/

importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{	
	
	var isCO = require('../lib/Co').isCO;
	var isDirective = require('../lib/Directive').isDirective;


	if(!args.ScriptLog) trace("LoopProvider: Delegating....");
	let PreviousScritLog = args.ScriptLog || "------------- Begin ----------------\n";
	//preserve the scriptlog so far
	trace( PreviousScritLog + "[EVENT LOOP]");
	let Coroutine = args.Coroutine;
	let traceDelegate = Coroutine.log.bind(Coroutine);
	let lastDirective = args.lastDirective || null;
	
	if(!isCO(Coroutine)){
		traceDelegate("Expecting inboundDelegate to be delegate!");
		return PIPELET_ERROR;
	}
	try{
		if(!!lastDirective){
			args.Directive = Coroutine.coroutine.send(lastDirective) || null;
		}else{
			args.Directive = Coroutine.coroutine.next() || null;
		}
		if(!empty(args.Directive) && !isDirective(args.Directive)){
			throw new Error("LoopProvider handles only directives. \n\nInspect:" + JSON.stringify(Coroutine));
		}
	}catch(e){
		traceDelegate("Can't progress CoRoutine " + Coroutine.name +  "(to step " + (Coroutine._step + 1) + ") due to error:");
		traceDelegate(e + "\nStack trace:\n");
		traceDelegate(e.stack);
		return PIPELET_ERROR;
	}
	
	args.DirectivePipeline = !!args.Directive ? args.Directive.pipeline : null;
	if(empty(args.Directive)){
		traceDelegate("Iteration completed!");
	}
   return PIPELET_NEXT;
}
