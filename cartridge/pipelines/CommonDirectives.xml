<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline type="view">
  <branch basename="Render">
    <segment>
      <node>
        <start-node name="Render" secure="false"/>
        <node-display x="1" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="true" name="Directive.scope.template"/>
        </interaction-node>
        <node-display x="0" y="3"/>
      </node>
    </segment>
  </branch>
  <branch basename="GetBasket">
    <segment>
      <node>
        <start-node call-mode="private" name="GetBasket" secure="false"/>
        <node-display x="2" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="GetBasket" pipelet-set-identifier="bc_api">
          <config-property key="Create" value="true"/>
          <key-binding alias="Directive['scope']['basket']" key="Basket"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
                <config-property key="OnError" value="Exception"/>
                <config-property key="Transactional" value="false"/>
                <config-property key="Expression" value="Directive.reject(&quot;GetBasket[CommonDirective-GetBasket]Basket cannot be resolved!&quot;)"/>
              </pipelet-node>
              <node-display x="1" y="1"/>
            </node>
            <simple-transition/>
            <node>
              <end-node/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.resolve(Directive.scope.basket)"/>
          <key-binding alias="null" key="Result"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Noop">
    <segment>
      <node>
        <start-node name="Noop" secure="false"/>
        <node-display x="5" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.resolve(&quot;Noop resolved!&quot;)"/>
          <key-binding alias="null" key="Result"/>
        </pipelet-node>
        <node-display x="0" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="RenderContinue">
    <segment>
      <node>
        <start-node name="RenderContinue" secure="false"/>
        <node-display x="6" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-continue-node secure="false" start-name="CommonDirectives-RenderContinueNode" transaction-required="false">
          <template buffered="true" dynamic="true" name="Directive.scope.template"/>
        </interaction-continue-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.continued(CurrentRequest.httpParameters)"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Error">
    <segment>
      <node>
        <start-node name="Error" secure="false"/>
        <node-display x="8" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <jump-node start-name-ref="Coroutine-Error"/>
        <node-display x="0" y="3"/>
      </node>
    </segment>
  </branch>
  <branch basename="CustomerLogin">
    <segment>
      <node>
        <start-node call-mode="private" name="CustomerLogin" secure="false"/>
        <node-display x="1" y="6"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="LoginCustomer" pipelet-set-identifier="bc_api">
          <key-binding alias="Directive.scope.login" key="Login"/>
          <key-binding alias="Directive.scope.password" key="Password"/>
          <key-binding alias="Directive.scope.rememberme" key="RememberMe"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
                <config-property key="OnError" value="Exception"/>
                <config-property key="Transactional" value="false"/>
                <config-property key="Expression" value="Directive.reject(&quot;Cannot login customer with the provided details!&quot;)"/>
                <key-binding alias="null" key="Result"/>
              </pipelet-node>
              <node-display x="1" y="1"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <end-node/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.resolve(CurrentCustomer)"/>
          <key-binding alias="null" key="Result"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="CustomerGet">
    <segment>
      <node>
        <start-node call-mode="private" name="CustomerGet" secure="false"/>
        <node-display x="4" y="6"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="2"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.resolve(CurrentCustomer)"/>
          <key-binding alias="null" key="Result"/>
        </pipelet-node>
        <node-display x="0" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="CustomerLogout">
    <segment>
      <node>
        <start-node call-mode="private" name="CustomerLogout" secure="false"/>
        <node-display x="6" y="6"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="LogoutCustomer" pipelet-set-identifier="bc_api">
          <key-binding alias="Directive.scope.rememberme" key="RememberMe"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Eval" pipelet-set-identifier="bc_api">
          <config-property key="OnError" value="Exception"/>
          <config-property key="Transactional" value="false"/>
          <config-property key="Expression" value="Directive.resolve(CurrentCustomer)"/>
          <key-binding alias="null" key="Result"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
</pipeline>
